
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace cfg.LevelConfig
{
public partial class TbLevelInfo
{
    private readonly System.Collections.Generic.Dictionary<int, LevelConfig.LevelInfo> _dataMap;
    private readonly System.Collections.Generic.List<LevelConfig.LevelInfo> _dataList;
    
    public TbLevelInfo(ByteBuf _buf)
    {
        _dataMap = new System.Collections.Generic.Dictionary<int, LevelConfig.LevelInfo>();
        _dataList = new System.Collections.Generic.List<LevelConfig.LevelInfo>();
        
        for(int n = _buf.ReadSize() ; n > 0 ; --n)
        {
            LevelConfig.LevelInfo _v;
            _v = global::cfg.LevelConfig.LevelInfo.DeserializeLevelInfo(_buf);
            _dataList.Add(_v);
            _dataMap.Add(_v.Id, _v);
        }
    }

    public System.Collections.Generic.Dictionary<int, LevelConfig.LevelInfo> DataMap => _dataMap;
    public System.Collections.Generic.List<LevelConfig.LevelInfo> DataList => _dataList;

    public LevelConfig.LevelInfo GetOrDefault(int key) => _dataMap.TryGetValue(key, out var v) ? v : null;
    public LevelConfig.LevelInfo Get(int key) => _dataMap[key];
    public LevelConfig.LevelInfo this[int key] => _dataMap[key];

    public void ResolveRef(Tables tables)
    {
        foreach(var _v in _dataList)
        {
            _v.ResolveRef(tables);
        }
    }

}

}

